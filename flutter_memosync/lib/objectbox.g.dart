// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/services/models/memo.dart';
import 'src/services/models/settings.dart';
import 'src/services/models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1802099124627800133),
      name: 'SettingsObject',
      lastPropertyId: const IdUid(11, 5170716514867111143),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3658916574990741375),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7183470845003545038),
            name: 'notificationsEnabled',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9131191219664393701),
            name: 'locale',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8519703443511612641),
            name: 'onStartup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 114878746288545066),
            name: 'launchMinimized',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7286044354514574718),
            name: 'closeMinimized',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4125372603773619095),
            name: 'darkMode',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 638546078286123367),
            name: 'autoSave',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6054518670964488088),
            name: 'autoSaveInterval',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7651500493277564334),
            name: 'bgSync',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5170716514867111143),
            name: 'bgSyncWifiOnly',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1055531509661255756),
      name: 'UserObject',
      lastPropertyId: const IdUid(4, 134245841953881265),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1730563784349922907),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2160235371543273611),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8595369247990831842),
            name: 'accessToken',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 134245841953881265),
            name: 'refreshToken',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4069413510918380086),
      name: 'MemoObject',
      lastPropertyId: const IdUid(8, 2516340542979424665),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9050067451739108436),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5963388206405135402),
            name: 'title',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 820892203743669510)),
        ModelProperty(
            id: const IdUid(3, 4099516092467832380),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2314021521984331796),
            name: 'lastSynchedText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3689455229493583917),
            name: 'version',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9018749663950860507),
            name: 'patches',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2516340542979424665),
            name: 'dbSettings',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 4069413510918380086),
      lastIndexId: const IdUid(1, 820892203743669510),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [1998655991692523208],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    SettingsObject: EntityDefinition<SettingsObject>(
        model: _entities[0],
        toOneRelations: (SettingsObject object) => [],
        toManyRelations: (SettingsObject object) => {},
        getId: (SettingsObject object) => object.id,
        setId: (SettingsObject object, int id) {
          object.id = id;
        },
        objectToFB: (SettingsObject object, fb.Builder fbb) {
          final localeOffset =
              object.locale == null ? null : fbb.writeString(object.locale!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.notificationsEnabled);
          fbb.addOffset(2, localeOffset);
          fbb.addBool(3, object.onStartup);
          fbb.addBool(4, object.launchMinimized);
          fbb.addBool(5, object.closeMinimized);
          fbb.addBool(6, object.darkMode);
          fbb.addBool(7, object.autoSave);
          fbb.addInt64(8, object.autoSaveInterval);
          fbb.addBool(9, object.bgSync);
          fbb.addBool(10, object.bgSyncWifiOnly);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SettingsObject()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..notificationsEnabled =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false)
            ..locale = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..onStartup =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false)
            ..launchMinimized =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false)
            ..closeMinimized =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false)
            ..darkMode =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false)
            ..autoSave =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false)
            ..autoSaveInterval =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)
            ..bgSync =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false)
            ..bgSyncWifiOnly =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);

          return object;
        }),
    UserObject: EntityDefinition<UserObject>(
        model: _entities[1],
        toOneRelations: (UserObject object) => [],
        toManyRelations: (UserObject object) => {},
        getId: (UserObject object) => object.id,
        setId: (UserObject object, int id) {
          object.id = id;
        },
        objectToFB: (UserObject object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final accessTokenOffset = fbb.writeString(object.accessToken);
          final refreshTokenOffset = fbb.writeString(object.refreshToken);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, emailOffset);
          fbb.addOffset(2, accessTokenOffset);
          fbb.addOffset(3, refreshTokenOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserObject()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..accessToken = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..refreshToken = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '');

          return object;
        }),
    MemoObject: EntityDefinition<MemoObject>(
        model: _entities[2],
        toOneRelations: (MemoObject object) => [],
        toManyRelations: (MemoObject object) => {},
        getId: (MemoObject object) => object.id,
        setId: (MemoObject object, int id) {
          object.id = id;
        },
        objectToFB: (MemoObject object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final textOffset = fbb.writeString(object.text);
          final lastSynchedTextOffset = fbb.writeString(object.lastSynchedText);
          final patchesOffset = fbb.writeString(object.patches);
          final dbSettingsOffset = object.dbSettings == null
              ? null
              : fbb.writeString(object.dbSettings!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, textOffset);
          fbb.addOffset(3, lastSynchedTextOffset);
          fbb.addInt64(4, object.version);
          fbb.addOffset(5, patchesOffset);
          fbb.addOffset(7, dbSettingsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MemoObject()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..text = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..lastSynchedText = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..version =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..patches = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..dbSettings = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [SettingsObject] entity fields to define ObjectBox queries.
class SettingsObject_ {
  /// see [SettingsObject.id]
  static final id =
      QueryIntegerProperty<SettingsObject>(_entities[0].properties[0]);

  /// see [SettingsObject.notificationsEnabled]
  static final notificationsEnabled =
      QueryBooleanProperty<SettingsObject>(_entities[0].properties[1]);

  /// see [SettingsObject.locale]
  static final locale =
      QueryStringProperty<SettingsObject>(_entities[0].properties[2]);

  /// see [SettingsObject.onStartup]
  static final onStartup =
      QueryBooleanProperty<SettingsObject>(_entities[0].properties[3]);

  /// see [SettingsObject.launchMinimized]
  static final launchMinimized =
      QueryBooleanProperty<SettingsObject>(_entities[0].properties[4]);

  /// see [SettingsObject.closeMinimized]
  static final closeMinimized =
      QueryBooleanProperty<SettingsObject>(_entities[0].properties[5]);

  /// see [SettingsObject.darkMode]
  static final darkMode =
      QueryBooleanProperty<SettingsObject>(_entities[0].properties[6]);

  /// see [SettingsObject.autoSave]
  static final autoSave =
      QueryBooleanProperty<SettingsObject>(_entities[0].properties[7]);

  /// see [SettingsObject.autoSaveInterval]
  static final autoSaveInterval =
      QueryIntegerProperty<SettingsObject>(_entities[0].properties[8]);

  /// see [SettingsObject.bgSync]
  static final bgSync =
      QueryBooleanProperty<SettingsObject>(_entities[0].properties[9]);

  /// see [SettingsObject.bgSyncWifiOnly]
  static final bgSyncWifiOnly =
      QueryBooleanProperty<SettingsObject>(_entities[0].properties[10]);
}

/// [UserObject] entity fields to define ObjectBox queries.
class UserObject_ {
  /// see [UserObject.id]
  static final id =
      QueryIntegerProperty<UserObject>(_entities[1].properties[0]);

  /// see [UserObject.email]
  static final email =
      QueryStringProperty<UserObject>(_entities[1].properties[1]);

  /// see [UserObject.accessToken]
  static final accessToken =
      QueryStringProperty<UserObject>(_entities[1].properties[2]);

  /// see [UserObject.refreshToken]
  static final refreshToken =
      QueryStringProperty<UserObject>(_entities[1].properties[3]);
}

/// [MemoObject] entity fields to define ObjectBox queries.
class MemoObject_ {
  /// see [MemoObject.id]
  static final id =
      QueryIntegerProperty<MemoObject>(_entities[2].properties[0]);

  /// see [MemoObject.title]
  static final title =
      QueryStringProperty<MemoObject>(_entities[2].properties[1]);

  /// see [MemoObject.text]
  static final text =
      QueryStringProperty<MemoObject>(_entities[2].properties[2]);

  /// see [MemoObject.lastSynchedText]
  static final lastSynchedText =
      QueryStringProperty<MemoObject>(_entities[2].properties[3]);

  /// see [MemoObject.version]
  static final version =
      QueryIntegerProperty<MemoObject>(_entities[2].properties[4]);

  /// see [MemoObject.patches]
  static final patches =
      QueryStringProperty<MemoObject>(_entities[2].properties[5]);

  /// see [MemoObject.dbSettings]
  static final dbSettings =
      QueryStringProperty<MemoObject>(_entities[2].properties[6]);
}
